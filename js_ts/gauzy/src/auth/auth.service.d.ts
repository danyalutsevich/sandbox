import { CommandBus } from '@nestjs/cqrs';
import { HttpService } from '@nestjs/axios';
import { BadRequestException } from '@nestjs/common';
import { IUserRegistrationInput, LanguagesEnum, IAuthResponse, IUser, IChangePasswordRequest, IResetPasswordRequest, PermissionsEnum, IUserEmailInput, IUserSigninWorkspaceResponse, IUserCodeInput, IUserLoginInput, IUserLoginInput as IUserWorkspaceSigninInput, IUserTokenInput, ISocialAccountBase, ISocialAccountExistUser, ISocialAccountLogin, ISocialAccount } from '../../plugins/contracts/dist/index';
import { SocialAuthService } from '../../plugins/auth/dist/index';
import { IAppIntegrationConfig } from '../../plugins/common/dist/index';
import { EventBus } from '../event-bus/event-bus';
import { EmailService } from './../email-send/email.service';
import { User } from '../user/user.entity';
import { UserService } from '../user/user.service';
import { RoleService } from './../role/role.service';
import { UserOrganizationService } from '../user-organization/user-organization.services';
import { EmailConfirmationService } from './email-confirmation.service';
import { TypeOrmUserRepository } from './../user/repository/type-orm-user.repository';
import { TypeOrmOrganizationTeamRepository } from './../organization-team/repository/type-orm-organization-team.repository';
import { EmployeeService } from '../employee/employee.service';
import { SocialAccountService } from './social-account/social-account.service';
export declare class AuthService extends SocialAuthService {
    private typeOrmUserRepository;
    private readonly typeOrmOrganizationTeamRepository;
    private readonly emailConfirmationService;
    private readonly userService;
    private readonly employeeService;
    private readonly roleService;
    private readonly emailService;
    private readonly userOrganizationService;
    private readonly commandBus;
    private readonly httpService;
    private readonly socialAccountService;
    private readonly eventBus;
    constructor(typeOrmUserRepository: TypeOrmUserRepository, typeOrmOrganizationTeamRepository: TypeOrmOrganizationTeamRepository, emailConfirmationService: EmailConfirmationService, userService: UserService, employeeService: EmployeeService, roleService: RoleService, emailService: EmailService, userOrganizationService: UserOrganizationService, commandBus: CommandBus, httpService: HttpService, socialAccountService: SocialAccountService, eventBus: EventBus);
    /**
     * User Login Request
     *
     * @param email The user's email address
     * @param password The user's password
     * @returns A Promise that resolves to the authentication response or null
     */
    login({ email, password }: IUserLoginInput): Promise<IAuthResponse | null>;
    /**
     * Authenticate a user by email and password and return user workspaces.
     *
     * @param email - The user's email.
     * @param password - The user's password.
     * @returns A promise that resolves to a response with user workspaces.
     * @throws UnauthorizedException if authentication fails.
     */
    signinWorkspacesByEmailPassword(input: IUserWorkspaceSigninInput, includeTeams: boolean): Promise<IUserSigninWorkspaceResponse>;
    /**
     * Verify OAuth token when signin with social media from Ever Teams
     *
     * @param provider The provider used with user for signin
     * @param token The token generated by OAuth provider from Ever Teams frontent
     * @returns A promise resolved by the provider name and the account ID, both decode from the token
     * @throws A bad request if the provider used by user is not supported
     */
    private verifyOAuthToken;
    /**
     * Check if any user with the given provider infos exists
     * This function is used to facilitate the GauzyAdapter in Ever Teams try to create new Users or only signin them

     * @param input An object that contains the provider name and the provider Account ID
     * @returns A promise that resolves to a boolean specifying if the user exists or not
     */
    socialSignupCheckIfUserExistsBySocial(input: ISocialAccountBase): Promise<ISocialAccountExistUser>;
    /**
     * Authenticate a user by email from social media and return user workspaces.
     *
     * @param email - The user's email.
     * @param password - The user's password.
     * @returns A promise that resolves to a response with user workspaces.
     * @throws UnauthorizedException if authentication fails.
     */
    signinWorkspacesByEmailSocial(input: ISocialAccountLogin, includeTeams: boolean): Promise<IUserSigninWorkspaceResponse>;
    /**
     * This method links a user to an oAuth account when signin/singup with a social media provider
     *
     * @param input The body request that contains the token to be verified and the provider name
     * @returns A promise that resolved with  an account creation
     */
    linkUserToSocialAccount(input: ISocialAccountLogin): Promise<ISocialAccount>;
    /**
     * Generate a JWT token for the given user.
     *
     * @param user - The user object for which to generate the token.
     * @returns The JWT token as a string.
     */
    private generateToken;
    /**
     * Initiates the process to request a password reset.
     *
     * @param request - The reset password request object containing the email address.
     * @param languageCode - The language code used for email communication.
     * @param originUrl - Optional parameter representing the origin URL of the request.
     * @returns A Promise that resolves to a boolean indicating the success of the password reset request
     *          or throws a BadRequestException in case of failure.
     */
    requestResetPassword(request: IResetPasswordRequest, languageCode: LanguagesEnum, originUrl?: string): Promise<boolean | BadRequestException>;
    /**
     * Fetch users from the repository based on specific criteria.
     *
     * @param {string} email - The user's email address.
     * @returns {Promise<User[]>} A Promise that resolves to an array of User objects.
     */
    fetchUsers(email: IUserEmailInput['email']): Promise<IUser[]>;
    /**
     * Change password
     *
     * @param request
     */
    resetPassword(request: IChangePasswordRequest): Promise<boolean>;
    /**
     * Shared method involved in
     * 1. Sign up
     * 2. Addition of new user to organization
     * 3. User invite accept scenario
     *
     * @param input
     * @param languageCode
     * @returns
     */
    register(input: IUserRegistrationInput & Partial<IAppIntegrationConfig>, languageCode: LanguagesEnum): Promise<User>;
    /**
     *
     * @param id
     * @param thirdPartyId
     * @returns
     */
    getAuthenticatedUser(id: string, thirdPartyId?: string): Promise<User>;
    isAuthenticated(token: string): Promise<boolean>;
    /**
     * Check current user has role
     *
     * @param token
     * @param roles
     * @returns
     */
    hasRole(roles?: string[]): Promise<boolean>;
    /**
     * Check current user has permission
     *
     * @param token
     * @param roles
     * @returns
     */
    hasPermissions(permissions?: PermissionsEnum[]): Promise<boolean>;
    /**
     *
     * @param emails
     * @returns
     */
    validateOAuthLoginEmail(emails: Array<{
        value: string;
        verified: boolean;
    }>): Promise<{
        success: boolean;
        authData: {
            jwt: string;
            userId: string;
        };
    }>;
    /**
     * Generates a JWT access token for a given user.
     *
     * This function takes a partial user object, primarily the user's ID,
     * and retrieves the user's details including their role and permissions.
     * It then constructs a JWT payload and generates a token.
     * If the user does not exist, an error is thrown.
     *
     * @param request A partial IUser object, mainly containing the user's ID.
     * @returns A Promise that resolves to a JWT access token string.
     * @throws Throws an UnauthorizedException if the user is not found or if there is an issue in token generation.
     */
    getJwtAccessToken(request: Partial<IUser>): Promise<string>;
    /**
     * Generates a JWT refresh token for a given user.
     *
     * This function takes a user object and constructs a JWT payload with the user's
     * ID, email, tenant ID, and role. It then generates a refresh token based on this payload.
     *
     * @param user A partial IUser object containing at least the user's ID, email, and role.
     * @returns A Promise that resolves to a JWT refresh token string.
     * @throws Logs an error and throws an exception if the token generation fails.
     */
    getJwtRefreshToken(user: Partial<IUser>): Promise<string>;
    /**
     * Get JWT access token from JWT refresh token
     *
     * @returns
     */
    getAccessTokenFromRefreshToken(): Promise<{
        token: string;
    }>;
    /**
     * Sends a unique authentication code to the user's email for workspace sign-in.
     *
     * @param input - User email input along with partial app integration configuration.
     * @param locale - Language/locale for email content.
     * @returns {Promise<void>} - A promise indicating the completion of the operation.
     */
    sendWorkspaceSigninCode(input: IUserEmailInput & Partial<IAppIntegrationConfig>, locale: LanguagesEnum): Promise<void>;
    /**
     * Sign in and confirm by code for multi-tenant workspaces.
     * @param payload - The user invitation code confirmation input.
     * @returns The user sign-in workspace response.
     */
    confirmWorkspaceSigninByCode(payload: IUserEmailInput & IUserCodeInput, includeTeams: boolean): Promise<IUserSigninWorkspaceResponse>;
    /**
     * Verify workspace signin token
     *
     * @param input - The user email and token input.
     * @returns An object containing user information and tokens.
     */
    workspaceSigninVerifyToken(input: IUserEmailInput & IUserTokenInput): Promise<IAuthResponse | null>;
    /**
     * Verify the JWT token and return the payload.
     * @param token - The JWT token to verify.
     * @returns The token payload or throws an error.
     */
    private verifyToken;
    /**
     * Get teams for a user within a specific tenant.
     *
     * @param tenantId The ID of the tenant.
     * @param userId The ID of the user.
     * @param employeeId The ID of the employee (optional).
     *
     * @returns A Promise that resolves to an array of IOrganizationTeam objects.
     */
    private getTeamsForUser;
    /**
     * Creates workspace response objects for a list of users.
     *
     * @param {Object} params - The parameters.
     * @param {IUser[]} params.users - The list of users.
     * @param {string} params.email - The email address.
     * @param {string} params.code - The code for workspace signin.
     * @param {boolean} params.includeTeams - Flag to include teams in the response.
     * @returns {Promise<IUserSigninWorkspaceResponse>} A promise that resolves to the workspace response.
     */
    private createUserSigninWorkspaceResponse;
    /**
     * Creates a workspace response object for a given user.
     *
     * @param user The user object of type IUser.
     * @param code The code used for generating the user token.
     * @param includeTeams Flag indicating whether to include team information in the response.
     * @returns A promise that resolves to the workspace response object of type IWorkspaceResponse.
     */
    private createWorkspace;
    /**
     * Creates a new User object from a given IUser object.
     *
     * @param user The IUser object to be transformed.
     * @returns A new User object with properties mapped from the IUser object.
     */
    private createUserObject;
}
