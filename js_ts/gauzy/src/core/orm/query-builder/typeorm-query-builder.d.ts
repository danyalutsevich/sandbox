import { EntityTarget, FindManyOptions, Repository, SelectQueryBuilder } from 'typeorm';
import { IQueryBuilder } from './iquery-builder';
export declare class TypeOrmQueryBuilder<Entity extends Object> implements IQueryBuilder<Entity> {
    private readonly repo;
    private qb;
    get alias(): string;
    constructor(repo: Repository<Entity>);
    setQueryBuilder(qb: SelectQueryBuilder<Entity>): this;
    getQueryBuilder(): SelectQueryBuilder<Entity>;
    clone(): this;
    subQuery(): IQueryBuilder<Entity>;
    distinct(isDistinct?: boolean): this;
    setFindOptions(findOptions: FindManyOptions<Entity>): this;
    select(selection: string, selectionAliasName?: string): this;
    addSelect(selection: string, selectionAliasName?: string): this;
    from(entityTarget: EntityTarget<Entity> | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName?: string): this;
    addFrom(entityTarget: EntityTarget<Entity> | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>), aliasName?: string): this;
    innerJoin(relation: string, alias: string, condition?: string): this;
    innerJoinAndSelect(relation: string, alias: string, condition?: string): this;
    leftJoin(relation: string, alias: string, condition?: string): this;
    leftJoinAndSelect(relation: string, alias: string, condition?: string): this;
    where(condition: string | object, parameters?: object): this;
    andWhere(condition: string | object, parameters?: object): this;
    orWhere(condition: string | object, parameters?: object): this;
    having(having: string, parameters?: object): this;
    andHaving(having: string, parameters?: object): this;
    orHaving(having: string, parameters?: object): this;
    groupBy(groupBy: string): this;
    addGroupBy(groupBy: string): this;
    orderBy(sort: string, order?: "ASC" | "DESC", nulls?: "NULLS FIRST" | "NULLS LAST"): this;
    addOrderBy(sort: string, order?: "ASC" | "DESC", nulls?: "NULLS FIRST" | "NULLS LAST"): this;
    limit(limit?: number): this;
    offset(offset?: number): this;
    take(take?: number): this;
    skip(skip?: number): this;
    getQuery(): string;
    getSql(): string;
    getParameters(): any;
    getCount(): Promise<number>;
    getMany(): Promise<any[]>;
    getRawMany(): Promise<any[]>;
    getOne(): Promise<any>;
    getRawOne(): Promise<any>;
    getManyAndCount(): Promise<[Entity[], number]>;
}
